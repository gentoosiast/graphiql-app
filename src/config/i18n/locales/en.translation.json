{
  "greeting": "Hello World!",
  "meetTheTeam": "Meet the team",
  "welcomePage": "Welcome page",
  "mainPage": "Main Page",
  "teamDescription": "Our team consists of creative, inventive people. Despite the fact that we are different, we still love coding, taking challenges, learning something new and creating high-quality web-sites. Under the guidance of a great mentor Konstantin we worked on this project.",
  "courseTitle": "About the course",
  "courseDescription": "The Rolling Scopes School provides a special free-of-charge React course. It is open to everyone, who has experience in JavaScript, HTML, CSS. After accomplishing an education, students receive an electronic certificate of completion",

  "from": "From:",
  "role": "Role in the team:",
  "book": "Favorite or last read technical book:",
  "experience": "IT experience:",
  "courses": "Courses:",
  "pets": "Pets:",
  "talent": "Hidden talent:",
  "kateWelcomeName": "Kate Goncharick",
  "kateWelcomeRole": "Developer",
  "kateWelcomeFrom": "Minsk, Belarus",
  "kateWelcomeBook": "Groking algoritms",
  "kateWelcomeExperience": "Self-education since summer of 2022",
  "kateWelcomeCourses": "Javascript/Frontend from RS School",
  "kateWelcomePets": "2 my girls (Varya and Fanya) and 5 other cats on foster",
  "kateWelcomeTalent": "Massage",

  "iraWelcomeName": "Irina Grebennikova",
  "iraWelcomeRole": "Developer",
  "iraWelcomeFrom": "Izhevsk, Russia",
  "iraWelcomeBook": "React 18 Design Patterns and Best Practices",
  "iraWelcomeExperience": "More than a year",
  "iraWelcomeCourses": "Javascript/Frontend from RS School",
  "iraWelcomePets": "Cat Murych, black as a night",
  "iraWelcomeTalent": "Singing",

  "sergeyWelcomeName": "Sergey Koksharov",
  "sergeyWelcomeRole": "Team Lead, developer",
  "sergeyWelcomeFrom": "Kirishi, Russia",
  "sergeyWelcomeBook": "Introduction to Algorithms",
  "sergeyWelcomeExperience": "University degree in Software Development and several years of self-education",
  "sergeyWelcomeCourses": "RS School JS/FE, Angular, Node.js",
  "sergeyWelcomePets": "Red cat Ryzhik. Overweight & tender",
  "sergeyWelcomeTalent": "Playing chess",

  "ourPets": "Our pets",
  "varya": "Varya",
  "fanya": "Fanya",
  "murych": "Murych",
  "ryzhik": "Ryzhik",

  "selectLanguage": "Select UI language",
  "signIn": "Sign In",
  "signUp": "Sign Up",
  "signOut": "Sign out",
  "email": "Email",
  "password": "Password",
  "confirmPassword": "Confirm Password",
  "requiredError": "Field is required",
  "invalidEmail": "Invalid email",
  "notMatch": "Passwords do not match",
  "shortPassword": "Password must be at least 8 characters long",
  "weakPassword": "Password must contain at least one letter, one digit, one special character",
  "noAccount": "Don't have an account?",
  "haveAccount": "Already have an account?",
  "registerSuccess": "Account created successfully",
  "accoutExistsError": "Account already exists",
  "defaultError": "Something went wrong",
  "loginSuccess": "You've successfully signed in",
  "accoutNotFound": "Incorrect email or password",
  "signOutSuccess": "You've successfully signed out",

  "graphqlEndpoint": "GraphQL endpoint",
  "changeEndpoint": "Change endpoint",
  "endpointSet": "Endpoint set",
  "prettifyQuery": "Prettify query",
  "sendRequest": "Send request",
  "graphqlQuery": "GraphQL Query",
  "graphqlResponse": "GraphQL API Response",
  "graphqlVariablesPlaceholder": "Variables (in JSON format)",
  "graphqlHeadersPlaceholder": "Headers (in JSON format)",
  "graphqlRequestTabsLabel": "Variables / Headers tabbar",
  "graphqlVariablesTabLabel": "Variables",
  "graphqlHeadersTabLabel": "Headers",
  "collapseTabsLabel": "Collapse tabs",
  "expandTabsLabel": "Expand tabs",

  "ohHello": "Oh.. Hello?",
  "busy": "We are a litte bit busy here..",
  "goAway": "So, maybe, you will go back to the welcome page?",
  "oops": " Oops!",
  "unknownError": "Something went wrong.. Try to reload the page.",
  "footerSergeyName": "Sergey",
  "footerIraName": "Ira",
  "footerKateName": "Kate",

  "docs.schemaProvides": "A GraphQL schema provides a root type for each kind of operation.",
  "docs.rootTypes": "Root types",
  "docs.allTypes": "All Schema Types",
  "docs.title": "Docs",
  "docs.type": "Type",
  "docs.show": "Show documentation",
  "docs.close": "Close documentation",
  "docs.implements": "Implements",
  "docs.fields": "Fields"
}
